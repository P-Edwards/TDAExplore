?png
?dev.off
dev.cur()
dev.list
dev.list()
png()
dev.cur()
dev.off(1)
dev.off(2)
z <- strsplit("64
64
75
50
73
71
60
71
71
59
66
70
71
72
69
68
67
59
60
69
73
68
70
64
70
74
75
59
65
65
","\n")
z <- z[[1]]
boxplot(z)
as.numeric(z)
z <- as.numeric(z)
boxplot(z)
boxplot(z*100/75)
z*100/76
z*100/75
hist(z)
hist(z*100/75)
load("/media/parker/SSD1TB/Downloads/radial_representatives_updated.RData")
plotting_name_stem <- "arp_ctrl"
z <- aggregated_interval_reps[[plotting_name_stem]]
library(ggplot2)
this_run_data <- aggregated_interval_reps[[plotting_name_stem]]
interval_reps <- rbind(this_run_data$first_class_intervals,this_run_data$second_class_intervals)
list_of_image_classes <- c(rep(this_run_data$first_class_name,nrow(this_run_data$first_class_intervals)),rep(this_run_data$second_class_name,nrow(this_run_data$second_class_intervals)))
image_classes <- unique(list_of_image_classes)
x_values <- rep(1:length(interval_reps[1,]),length(image_classes))
y_mean_values <- vector()
y_sd_values <- vector()
expanded_groups <- vector()
lineError <- function(input_column){sd(input_column)/sqrt(length(input_column))}
apply_sd <- function(input_data) {
return(apply(input_data,2,lineError))
}
for(name in image_classes) {
this_class_data <- interval_reps[which(list_of_image_classes==name,arr.ind=TRUE),]
y_mean_values <- c(y_mean_values,colMeans(this_class_data))
y_sd_values <- c(y_sd_values,apply_sd(this_class_data))
expanded_groups <- c(expanded_groups,rep(name,ncol(this_class_data)))
}
expanded_groups
#plot as distance from leading edge, "group" refers to experimental groupings such as control or KO
line_data <- data.frame(X=2*x_values,Y=y_mean_values,sd=y_sd_values,Class=expanded_groups)
which(list_of_image_classes=="CTRL666")
first_class_average - y_mean_values[1:50]
this_run_data$first_class_average - y_mean_values[1:50]
this_run_data$second_class_average - y_mean_values[51:100]
line_plot <- ggplot(line_data,aes(x=X, y=Y,group=Class)) +
geom_line(aes(color=Class), size=2.0)+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),text=element_text(size=14)) +
ylab("Average topological score") +
xlab("% Distance from center")
line_plot <- line_plot +
geom_ribbon(aes(ymin=Y-sd,ymax=Y+sd,fill=Class,alpha=0.1),show.legend=FALSE)
line_plot
plotting_name_stem <- "pfn1_gene"
this_run_data <- aggregated_interval_reps[[plotting_name_stem]]
interval_reps <- rbind(this_run_data$first_class_intervals,this_run_data$second_class_intervals)
list_of_image_classes <- c(rep(this_run_data$first_class_name,nrow(this_run_data$first_class_intervals)),rep(this_run_data$second_class_name,nrow(this_run_data$second_class_intervals)))
image_classes <- unique(list_of_image_classes)
x_values <- rep(1:length(interval_reps[1,]),length(image_classes))
y_mean_values <- vector()
y_sd_values <- vector()
expanded_groups <- vector()
lineError <- function(input_column){sd(input_column)/sqrt(length(input_column))}
apply_sd <- function(input_data) {
return(apply(input_data,2,lineError))
}
for(name in image_classes) {
this_class_data <- interval_reps[which(list_of_image_classes==name,arr.ind=TRUE),]
y_mean_values <- c(y_mean_values,colMeans(this_class_data))
y_sd_values <- c(y_sd_values,apply_sd(this_class_data))
expanded_groups <- c(expanded_groups,rep(name,ncol(this_class_data)))
}
#plot as distance from leading edge, "group" refers to experimental groupings such as control or KO
line_data <- data.frame(X=2*x_values,Y=y_mean_values,sd=y_sd_values,Class=expanded_groups)
line_plot <- ggplot(line_data,aes(x=X, y=Y,group=Class)) +
geom_line(aes(color=Class), size=2.0)+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),text=element_text(size=14)) +
ylab("Average topological score") +
xlab("% Distance from center")
line_plot <- line_plot +
geom_ribbon(aes(ymin=Y-sd,ymax=Y+sd,fill=Class,alpha=0.1),show.legend=FALSE)
line_plot
library(ggplot2)
plotting_name_stem <- "arp_ctrl"
load("/media/parker/SSD1TB/Downloads/radial_representatives_updated.RData")
library(ggplot2)
this_run_data <- aggregated_interval_reps[[plotting_name_stem]]
interval_reps <- rbind(this_run_data$first_class_intervals,this_run_data$second_class_intervals)
list_of_image_classes <- c(rep(this_run_data$first_class_name,nrow(this_run_data$first_class_intervals)),rep(this_run_data$second_class_name,nrow(this_run_data$second_class_intervals)))
image_classes <- unique(list_of_image_classes)
x_values <- rep(1:length(interval_reps[1,]),length(image_classes))
y_mean_values <- vector()
y_sd_values <- vector()
expanded_groups <- vector()
lineError <- function(input_column){sd(input_column)/sqrt(length(input_column))}
apply_sd <- function(input_data) {
return(apply(input_data,2,lineError))
}
for(name in image_classes) {
this_class_data <- interval_reps[which(list_of_image_classes==name,arr.ind=TRUE),]
y_mean_values <- c(y_mean_values,colMeans(this_class_data))
y_sd_values <- c(y_sd_values,apply_sd(this_class_data))
expanded_groups <- c(expanded_groups,rep(name,ncol(this_class_data)))
}
#plot as distance from leading edge, "group" refers to experimental groupings such as control or KO
line_data <- data.frame(X=2*x_values,Y=y_mean_values,sd=y_sd_values,Class=expanded_groups)
line_plot <- ggplot(line_data,aes(x=X, y=Y,group=Class)) +
geom_line(aes(color=Class), size=2.0)+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),text=element_text(size=14)) +
ylab("Average topological score") +
xlab("% Distance from center")
line_plot <- line_plot +
geom_ribbon(aes(ymin=Y-sd,ymax=Y+sd,fill=Class,alpha=0.1),show.legend=FALSE)
png(file.path(image_results_directory,paste('line_plot_',plotting_name_stem,'.png',sep="")),height=740,width=1280)
line_plot
?colMeans
load("/home/parker/Desktop/hipergator_remote/pedwards/vitriol_analysis/figure_scripts/3/ARP_CK/computation/computation_results/arp_ckpatches_2_radius_75_Mar-14-08.RData")
plotting_details <- plotting_data$image_svm
plotting_details$named_types
classes <- levels(summaries_results$class_names)
classification_status <- vector("character",length=length(plotting_details$data))
classification_name <- vector("character",length=length(plotting_details$data))
classes <- unique(plotting_details$named_types)
classification_status <- vector("character",length=length(plotting_details$data))
classification_name <- vector("character",length=length(plotting_details$data))
for(i in 1:length(plotting_details$data)) {
if(plotting_details$data[i] < 0) {
classification_name[i] <- classes[1]
if(plotting_details$named_types[i] == classes[1]) {
classification_status[i] <- "Correct"
} else {
classification_status[i] <- "Incorrect"
}
} else {
classification_name[i] <- classes[2]
if(plotting_details$named_types[i]==classes[2]) {
classification_status[i] <- "Correct"
} else {
classification_status[i] <- "Incorrect"
}
}
}
boxplot_image_data <- data.frame(features=plotting_details$data,types=plotting_details$named_types,testtypes=factor(classification_name),labelstatus=classification_status,replicate=plotting_data$image_svm$which_run)
# Confusion matrices
boxplot_data_for_confusion <- boxplot_image_data
boxplot_data_for_confusion[,"testtypes"] <- factor(boxplot_data_for_confusion[,"testtypes"],levels=rev(levels(boxplot_data_for_confusion[,"testtypes"])))
actual_labels <- levels(boxplot_data_for_confusion[,"types"])
levels(boxplot_data_for_confusion[,"types"]) <- c(paste("Actual ",actual_labels[1]),paste("Actual ",actual_labels[2]))
predicted_labels <- levels(boxplot_data_for_confusion[,"testtypes"])
levels(boxplot_data_for_confusion[,"testtypes"]) <- c(paste("Predicted ",predicted_labels[1]),paste("Predicted ",predicted_labels[2]))
base_confusion_matrix <- table(boxplot_data_for_confusion[,"testtypes"],boxplot_data_for_confusion[,"types"])
if(actual_labels[1]!=predicted_labels[1]) {
base_confusion_matrix <- base_confusion_matrix[,c(2,1)]
accuracy <- 100*sum(diag(base_confusion_matrix))/sum(base_confusion_matrix)
} else {
accuracy <- 100*sum(diag(base_confusion_matrix))/sum(base_confusion_matrix)
}
confusion_matrix <- as.data.frame(base_confusion_matrix[,c(2,1)])
library(ggplot2)
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var1,
y = Var2)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1,size=10) +
scale_fill_gradient(low = "blue",
high = "red") +
xlab(paste("Testing accuracy: ",round(accuracy,0),"%")) +
ylab("") +
theme(legend.position="none",panel.background = element_blank(),text=element_text(size=16,face="bold"))
p
boxplot_data_for_confusion[,"testtypes"]
# Confusion matrices
boxplot_data_for_confusion <- boxplot_image_data
classes
boxplot_image_data <- data.frame(features=plotting_details$data,types=plotting_details$named_types,testtypes=factor(classification_name,levels=classes),labelstatus=classification_status,replicate=plotting_data$image_svm$which_run)
boxplot_image_data <- data.frame(features=plotting_details$data,types=plotting_details$named_types,testtypes=factor(classification_name,levels=levels(classes)),labelstatus=classification_status,replicate=plotting_data$image_svm$which_run)
levels(classes)
factor(classification_name,levels=levels(classes))
classification_name
levels(classes)
factor(classification_name,names=levels(classes))
?factor
factor(classification_name,labels=levels(classes))
boxplot_image_data <- data.frame(features=plotting_details$data,types=plotting_details$named_types,testtypes=factor(classification_name,labels=levels(classes)),labelstatus=classification_status,replicate=plotting_data$image_svm$which_run)
boxplot_data_for_confusion <- data.frame(features=plotting_details$data,types=plotting_details$named_types,testtypes=factor(classification_name,labels=levels(classes)),labelstatus=classification_status,replicate=plotting_data$image_svm$which_run)
actual_labels <- levels(boxplot_data_for_confusion[,"types"])
levels(boxplot_data_for_confusion[,"types"]) <- c(paste("Actual ",actual_labels[1]),paste("Actual ",actual_labels[2]))
predicted_labels <- levels(boxplot_data_for_confusion[,"testtypes"])
levels(boxplot_data_for_confusion[,"testtypes"]) <- c(paste("Predicted ",predicted_labels[1]),paste("Predicted ",predicted_labels[2]))
base_confusion_matrix <- table(boxplot_data_for_confusion[,"testtypes"],boxplot_data_for_confusion[,"types"])
if(actual_labels[1]!=predicted_labels[1]) {
base_confusion_matrix <- base_confusion_matrix[,c(2,1)]
accuracy <- 100*sum(diag(base_confusion_matrix))/sum(base_confusion_matrix)
} else {
accuracy <- 100*sum(diag(base_confusion_matrix))/sum(base_confusion_matrix)
}
confusion_matrix <- as.data.frame(base_confusion_matrix[,c(2,1)])
p <- ggplot(data = confusion_matrix,
mapping = aes(x = Var1,
y = Var2)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = sprintf("%1.0f", Freq)), vjust = 1,size=10) +
scale_fill_gradient(low = "blue",
high = "red") +
xlab(paste("Testing accuracy: ",round(accuracy,0),"%")) +
ylab("") +
theme(legend.position="none",panel.background = element_blank(),text=element_text(size=16,face="bold"))
p
?sd
?is.na
is.na(c(3,5,NA,NA))
sum(!is.na(c(3,5,NA,NA)))
sum(!is.na(c(3,5,5,NA,NA)))
?read.csv
setwd("Dropbox/Projects/TDAExplore/")
library(devtools)
install()
?findInterval
install()
?factor
install()
getwd()
